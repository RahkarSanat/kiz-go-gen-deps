// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: authentication/authentication.proto

package authentication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	Token(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Logout(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Void, error)
	Decrypt(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*AuthToken, error)
	PasswordOtp(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Code, error)
	PasswordChange(ctx context.Context, in *NewPasswordRequest, opts ...grpc.CallOption) (*Void, error)
	MqttAuthenticateCacheValidTopics(ctx context.Context, in *MqttAuthentication, opts ...grpc.CallOption) (*AuthToken, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) Token(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/auth_authentication.AuthenticationService/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Logout(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/auth_authentication.AuthenticationService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Decrypt(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*AuthToken, error) {
	out := new(AuthToken)
	err := c.cc.Invoke(ctx, "/auth_authentication.AuthenticationService/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) PasswordOtp(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Code, error) {
	out := new(Code)
	err := c.cc.Invoke(ctx, "/auth_authentication.AuthenticationService/PasswordOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) PasswordChange(ctx context.Context, in *NewPasswordRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/auth_authentication.AuthenticationService/PasswordChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) MqttAuthenticateCacheValidTopics(ctx context.Context, in *MqttAuthentication, opts ...grpc.CallOption) (*AuthToken, error) {
	out := new(AuthToken)
	err := c.cc.Invoke(ctx, "/auth_authentication.AuthenticationService/MqttAuthenticateCacheValidTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	Token(context.Context, *AuthRequest) (*AuthResponse, error)
	Logout(context.Context, *AccessToken) (*Void, error)
	Decrypt(context.Context, *AccessToken) (*AuthToken, error)
	PasswordOtp(context.Context, *AccessToken) (*Code, error)
	PasswordChange(context.Context, *NewPasswordRequest) (*Void, error)
	MqttAuthenticateCacheValidTopics(context.Context, *MqttAuthentication) (*AuthToken, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) Token(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedAuthenticationServiceServer) Logout(context.Context, *AccessToken) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthenticationServiceServer) Decrypt(context.Context, *AccessToken) (*AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedAuthenticationServiceServer) PasswordOtp(context.Context, *AccessToken) (*Code, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordOtp not implemented")
}
func (UnimplementedAuthenticationServiceServer) PasswordChange(context.Context, *NewPasswordRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordChange not implemented")
}
func (UnimplementedAuthenticationServiceServer) MqttAuthenticateCacheValidTopics(context.Context, *MqttAuthentication) (*AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MqttAuthenticateCacheValidTopics not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_authentication.AuthenticationService/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Token(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_authentication.AuthenticationService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Logout(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_authentication.AuthenticationService/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Decrypt(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_PasswordOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).PasswordOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_authentication.AuthenticationService/PasswordOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).PasswordOtp(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_PasswordChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).PasswordChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_authentication.AuthenticationService/PasswordChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).PasswordChange(ctx, req.(*NewPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_MqttAuthenticateCacheValidTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MqttAuthentication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).MqttAuthenticateCacheValidTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_authentication.AuthenticationService/MqttAuthenticateCacheValidTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).MqttAuthenticateCacheValidTopics(ctx, req.(*MqttAuthentication))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_authentication.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _AuthenticationService_Token_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthenticationService_Logout_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _AuthenticationService_Decrypt_Handler,
		},
		{
			MethodName: "PasswordOtp",
			Handler:    _AuthenticationService_PasswordOtp_Handler,
		},
		{
			MethodName: "PasswordChange",
			Handler:    _AuthenticationService_PasswordChange_Handler,
		},
		{
			MethodName: "MqttAuthenticateCacheValidTopics",
			Handler:    _AuthenticationService_MqttAuthenticateCacheValidTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication/authentication.proto",
}
