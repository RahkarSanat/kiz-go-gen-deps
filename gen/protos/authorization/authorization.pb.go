// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: authorization/authorization.proto

package authorization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MqttFieldFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ClientInfo    string                 `protobuf:"bytes,2,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MqttFieldFilter) Reset() {
	*x = MqttFieldFilter{}
	mi := &file_authorization_authorization_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MqttFieldFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MqttFieldFilter) ProtoMessage() {}

func (x *MqttFieldFilter) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MqttFieldFilter.ProtoReflect.Descriptor instead.
func (*MqttFieldFilter) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{0}
}

func (x *MqttFieldFilter) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MqttFieldFilter) GetClientInfo() string {
	if x != nil {
		return x.ClientInfo
	}
	return ""
}

type ResponseMqttFieldFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldMessage  string                 `protobuf:"bytes,1,opt,name=field_message,json=fieldMessage,proto3" json:"field_message,omitempty"`
	FilterMessage string                 `protobuf:"bytes,2,opt,name=filter_message,json=filterMessage,proto3" json:"filter_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseMqttFieldFilter) Reset() {
	*x = ResponseMqttFieldFilter{}
	mi := &file_authorization_authorization_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseMqttFieldFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMqttFieldFilter) ProtoMessage() {}

func (x *ResponseMqttFieldFilter) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMqttFieldFilter.ProtoReflect.Descriptor instead.
func (*ResponseMqttFieldFilter) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseMqttFieldFilter) GetFieldMessage() string {
	if x != nil {
		return x.FieldMessage
	}
	return ""
}

func (x *ResponseMqttFieldFilter) GetFilterMessage() string {
	if x != nil {
		return x.FilterMessage
	}
	return ""
}

type AuthorizeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        *string                `protobuf:"bytes,1,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Object        *string                `protobuf:"bytes,2,opt,name=object,proto3,oneof" json:"object,omitempty"`
	Token         *Token                 `protobuf:"bytes,3,opt,name=token,proto3,oneof" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizeRequest) Reset() {
	*x = AuthorizeRequest{}
	mi := &file_authorization_authorization_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeRequest) ProtoMessage() {}

func (x *AuthorizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeRequest) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{2}
}

func (x *AuthorizeRequest) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *AuthorizeRequest) GetObject() string {
	if x != nil && x.Object != nil {
		return *x.Object
	}
	return ""
}

func (x *AuthorizeRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type AccessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   *string                `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	Action        *string                `protobuf:"bytes,2,opt,name=action,proto3,oneof" json:"action,omitempty"`
	Object        *string                `protobuf:"bytes,3,opt,name=object,proto3,oneof" json:"object,omitempty"`
	Resources     []string               `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty"`
	ApiKey        *string                `protobuf:"bytes,5,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRequest) Reset() {
	*x = AccessRequest{}
	mi := &file_authorization_authorization_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequest) ProtoMessage() {}

func (x *AccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequest.ProtoReflect.Descriptor instead.
func (*AccessRequest) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{3}
}

func (x *AccessRequest) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *AccessRequest) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *AccessRequest) GetObject() string {
	if x != nil && x.Object != nil {
		return *x.Object
	}
	return ""
}

func (x *AccessRequest) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AccessRequest) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

type Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	T             *string                `protobuf:"bytes,1,opt,name=t,proto3,oneof" json:"t,omitempty"`
	Ip            *string                `protobuf:"bytes,2,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	Cid           string                 `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Aid           *string                `protobuf:"bytes,4,opt,name=aid,proto3,oneof" json:"aid,omitempty"`
	Uid           *string                `protobuf:"bytes,5,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Subjects      string                 `protobuf:"bytes,6,opt,name=subjects,proto3" json:"subjects,omitempty"`
	Scopes        string                 `protobuf:"bytes,7,opt,name=scopes,proto3" json:"scopes,omitempty"`
	Session       string                 `protobuf:"bytes,8,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_authorization_authorization_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{4}
}

func (x *Token) GetT() string {
	if x != nil && x.T != nil {
		return *x.T
	}
	return ""
}

func (x *Token) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Token) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Token) GetAid() string {
	if x != nil && x.Aid != nil {
		return *x.Aid
	}
	return ""
}

func (x *Token) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *Token) GetSubjects() string {
	if x != nil {
		return x.Subjects
	}
	return ""
}

func (x *Token) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

func (x *Token) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type AuthorizeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Granted       bool                   `protobuf:"varint,1,opt,name=granted,proto3" json:"granted,omitempty"`
	Grants        []*Grant               `protobuf:"bytes,2,rep,name=grants,proto3" json:"grants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizeResponse) Reset() {
	*x = AuthorizeResponse{}
	mi := &file_authorization_authorization_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeResponse) ProtoMessage() {}

func (x *AuthorizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeResponse) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{5}
}

func (x *AuthorizeResponse) GetGranted() bool {
	if x != nil {
		return x.Granted
	}
	return false
}

func (x *AuthorizeResponse) GetGrants() []*Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

type Grant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Action        string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Object        string                 `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Field         []string               `protobuf:"bytes,4,rep,name=field,proto3" json:"field,omitempty"`
	Filter        []string               `protobuf:"bytes,5,rep,name=filter,proto3" json:"filter,omitempty"`
	Location      []string               `protobuf:"bytes,6,rep,name=location,proto3" json:"location,omitempty"`
	Time          []*GrantTime           `protobuf:"bytes,7,rep,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Grant) Reset() {
	*x = Grant{}
	mi := &file_authorization_authorization_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grant) ProtoMessage() {}

func (x *Grant) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grant.ProtoReflect.Descriptor instead.
func (*Grant) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{6}
}

func (x *Grant) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Grant) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Grant) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *Grant) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *Grant) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Grant) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Grant) GetTime() []*GrantTime {
	if x != nil {
		return x.Time
	}
	return nil
}

type GrantTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duration      int64                  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	CronExp       string                 `protobuf:"bytes,2,opt,name=cron_exp,json=cronExp,proto3" json:"cron_exp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrantTime) Reset() {
	*x = GrantTime{}
	mi := &file_authorization_authorization_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrantTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantTime) ProtoMessage() {}

func (x *GrantTime) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantTime.ProtoReflect.Descriptor instead.
func (*GrantTime) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{7}
}

func (x *GrantTime) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GrantTime) GetCronExp() string {
	if x != nil {
		return x.CronExp
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *string                `protobuf:"bytes,1,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Body          *string                `protobuf:"bytes,2,opt,name=body,proto3,oneof" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_authorization_authorization_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{8}
}

func (x *Request) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *Request) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

type SanitizeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccessToken     *string                `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	Action          string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Object          string                 `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Scope           []string               `protobuf:"bytes,4,rep,name=scope,proto3" json:"scope,omitempty"`
	Request         *Request               `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	IsInflux        bool                   `protobuf:"varint,6,opt,name=is_influx,json=isInflux,proto3" json:"is_influx,omitempty"`
	Db              string                 `protobuf:"bytes,7,opt,name=db,proto3" json:"db,omitempty"`
	ApiKey          *string                `protobuf:"bytes,8,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	ExcludeOwn      *bool                  `protobuf:"varint,9,opt,name=exclude_own,json=excludeOwn,proto3,oneof" json:"exclude_own,omitempty"`
	ExcludeZone     *bool                  `protobuf:"varint,10,opt,name=exclude_zone,json=excludeZone,proto3,oneof" json:"exclude_zone,omitempty"`
	ExcludeShare    *bool                  `protobuf:"varint,11,opt,name=exclude_share,json=excludeShare,proto3,oneof" json:"exclude_share,omitempty"`
	ExcludeRelation *bool                  `protobuf:"varint,12,opt,name=exclude_relation,json=excludeRelation,proto3,oneof" json:"exclude_relation,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SanitizeRequest) Reset() {
	*x = SanitizeRequest{}
	mi := &file_authorization_authorization_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SanitizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SanitizeRequest) ProtoMessage() {}

func (x *SanitizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SanitizeRequest.ProtoReflect.Descriptor instead.
func (*SanitizeRequest) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{9}
}

func (x *SanitizeRequest) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *SanitizeRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SanitizeRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *SanitizeRequest) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *SanitizeRequest) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SanitizeRequest) GetIsInflux() bool {
	if x != nil {
		return x.IsInflux
	}
	return false
}

func (x *SanitizeRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *SanitizeRequest) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *SanitizeRequest) GetExcludeOwn() bool {
	if x != nil && x.ExcludeOwn != nil {
		return *x.ExcludeOwn
	}
	return false
}

func (x *SanitizeRequest) GetExcludeZone() bool {
	if x != nil && x.ExcludeZone != nil {
		return *x.ExcludeZone
	}
	return false
}

func (x *SanitizeRequest) GetExcludeShare() bool {
	if x != nil && x.ExcludeShare != nil {
		return *x.ExcludeShare
	}
	return false
}

func (x *SanitizeRequest) GetExcludeRelation() bool {
	if x != nil && x.ExcludeRelation != nil {
		return *x.ExcludeRelation
	}
	return false
}

type SanitizeDecryptedRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Token           *Token                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Action          string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Object          string                 `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Scope           []string               `protobuf:"bytes,4,rep,name=scope,proto3" json:"scope,omitempty"`
	Request         *Request               `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	IsInflux        bool                   `protobuf:"varint,6,opt,name=is_influx,json=isInflux,proto3" json:"is_influx,omitempty"`
	Db              string                 `protobuf:"bytes,7,opt,name=db,proto3" json:"db,omitempty"`
	ApiKey          *string                `protobuf:"bytes,8,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	ExcludeOwn      *bool                  `protobuf:"varint,9,opt,name=exclude_own,json=excludeOwn,proto3,oneof" json:"exclude_own,omitempty"`
	ExcludeZone     *bool                  `protobuf:"varint,10,opt,name=exclude_zone,json=excludeZone,proto3,oneof" json:"exclude_zone,omitempty"`
	ExcludeShare    *bool                  `protobuf:"varint,11,opt,name=exclude_share,json=excludeShare,proto3,oneof" json:"exclude_share,omitempty"`
	ExcludeRelation *bool                  `protobuf:"varint,12,opt,name=exclude_relation,json=excludeRelation,proto3,oneof" json:"exclude_relation,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SanitizeDecryptedRequest) Reset() {
	*x = SanitizeDecryptedRequest{}
	mi := &file_authorization_authorization_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SanitizeDecryptedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SanitizeDecryptedRequest) ProtoMessage() {}

func (x *SanitizeDecryptedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SanitizeDecryptedRequest.ProtoReflect.Descriptor instead.
func (*SanitizeDecryptedRequest) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{10}
}

func (x *SanitizeDecryptedRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SanitizeDecryptedRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SanitizeDecryptedRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *SanitizeDecryptedRequest) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *SanitizeDecryptedRequest) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SanitizeDecryptedRequest) GetIsInflux() bool {
	if x != nil {
		return x.IsInflux
	}
	return false
}

func (x *SanitizeDecryptedRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *SanitizeDecryptedRequest) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *SanitizeDecryptedRequest) GetExcludeOwn() bool {
	if x != nil && x.ExcludeOwn != nil {
		return *x.ExcludeOwn
	}
	return false
}

func (x *SanitizeDecryptedRequest) GetExcludeZone() bool {
	if x != nil && x.ExcludeZone != nil {
		return *x.ExcludeZone
	}
	return false
}

func (x *SanitizeDecryptedRequest) GetExcludeShare() bool {
	if x != nil && x.ExcludeShare != nil {
		return *x.ExcludeShare
	}
	return false
}

func (x *SanitizeDecryptedRequest) GetExcludeRelation() bool {
	if x != nil && x.ExcludeRelation != nil {
		return *x.ExcludeRelation
	}
	return false
}

type SanitizeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Grants        []*Grant               `protobuf:"bytes,1,rep,name=grants,proto3" json:"grants,omitempty"`
	Request       *Request               `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SanitizeResponse) Reset() {
	*x = SanitizeResponse{}
	mi := &file_authorization_authorization_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SanitizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SanitizeResponse) ProtoMessage() {}

func (x *SanitizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SanitizeResponse.ProtoReflect.Descriptor instead.
func (*SanitizeResponse) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{11}
}

func (x *SanitizeResponse) GetGrants() []*Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *SanitizeResponse) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type GrantsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Grant               `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrantsList) Reset() {
	*x = GrantsList{}
	mi := &file_authorization_authorization_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrantsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantsList) ProtoMessage() {}

func (x *GrantsList) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantsList.ProtoReflect.Descriptor instead.
func (*GrantsList) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{12}
}

func (x *GrantsList) GetItems() []*Grant {
	if x != nil {
		return x.Items
	}
	return nil
}

type MqttAuthorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	ActiveSession string                 `protobuf:"bytes,2,opt,name=active_session,json=activeSession,proto3" json:"active_session,omitempty"`
	MqttUsername  string                 `protobuf:"bytes,3,opt,name=mqtt_username,json=mqttUsername,proto3" json:"mqtt_username,omitempty"`
	Action        string                 `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MqttAuthorization) Reset() {
	*x = MqttAuthorization{}
	mi := &file_authorization_authorization_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MqttAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MqttAuthorization) ProtoMessage() {}

func (x *MqttAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MqttAuthorization.ProtoReflect.Descriptor instead.
func (*MqttAuthorization) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{13}
}

func (x *MqttAuthorization) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MqttAuthorization) GetActiveSession() string {
	if x != nil {
		return x.ActiveSession
	}
	return ""
}

func (x *MqttAuthorization) GetMqttUsername() string {
	if x != nil {
		return x.MqttUsername
	}
	return ""
}

func (x *MqttAuthorization) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type TopicIsAvailable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Available     *string                `protobuf:"bytes,1,opt,name=available,proto3,oneof" json:"available,omitempty"`
	Allow         bool                   `protobuf:"varint,2,opt,name=allow,proto3" json:"allow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicIsAvailable) Reset() {
	*x = TopicIsAvailable{}
	mi := &file_authorization_authorization_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicIsAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicIsAvailable) ProtoMessage() {}

func (x *TopicIsAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_authorization_authorization_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicIsAvailable.ProtoReflect.Descriptor instead.
func (*TopicIsAvailable) Descriptor() ([]byte, []int) {
	return file_authorization_authorization_proto_rawDescGZIP(), []int{14}
}

func (x *TopicIsAvailable) GetAvailable() string {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return ""
}

func (x *TopicIsAvailable) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

var File_authorization_authorization_proto protoreflect.FileDescriptor

var file_authorization_authorization_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x0f, 0x4d, 0x71, 0x74, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x71, 0x74, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x01, 0x0a,
	0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x11,
	0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x02, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69,
	0x64, 0x22, 0x60, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x22, 0x50, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x8e, 0x04, 0x0a, 0x0f, 0x53,
	0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62,
	0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x77,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0b, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x04, 0x0a, 0x18,
	0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x64, 0x62, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a,
	0x10, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x0a, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x4d,
	0x71, 0x74, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x10, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0xcc, 0x04, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52,
	0x0a, 0x03, 0x43, 0x61, 0x6e, 0x12, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x08, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x53, 0x61, 0x6e, 0x69,
	0x74, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x16, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x71, 0x74, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x73, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x16, 0x4d, 0x71, 0x74, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x71, 0x74, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_authorization_authorization_proto_rawDescOnce sync.Once
	file_authorization_authorization_proto_rawDescData = file_authorization_authorization_proto_rawDesc
)

func file_authorization_authorization_proto_rawDescGZIP() []byte {
	file_authorization_authorization_proto_rawDescOnce.Do(func() {
		file_authorization_authorization_proto_rawDescData = protoimpl.X.CompressGZIP(file_authorization_authorization_proto_rawDescData)
	})
	return file_authorization_authorization_proto_rawDescData
}

var file_authorization_authorization_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_authorization_authorization_proto_goTypes = []any{
	(*MqttFieldFilter)(nil),          // 0: auth_authorization.MqttFieldFilter
	(*ResponseMqttFieldFilter)(nil),  // 1: auth_authorization.ResponseMqttFieldFilter
	(*AuthorizeRequest)(nil),         // 2: auth_authorization.AuthorizeRequest
	(*AccessRequest)(nil),            // 3: auth_authorization.AccessRequest
	(*Token)(nil),                    // 4: auth_authorization.Token
	(*AuthorizeResponse)(nil),        // 5: auth_authorization.AuthorizeResponse
	(*Grant)(nil),                    // 6: auth_authorization.Grant
	(*GrantTime)(nil),                // 7: auth_authorization.GrantTime
	(*Request)(nil),                  // 8: auth_authorization.Request
	(*SanitizeRequest)(nil),          // 9: auth_authorization.SanitizeRequest
	(*SanitizeDecryptedRequest)(nil), // 10: auth_authorization.SanitizeDecryptedRequest
	(*SanitizeResponse)(nil),         // 11: auth_authorization.SanitizeResponse
	(*GrantsList)(nil),               // 12: auth_authorization.GrantsList
	(*MqttAuthorization)(nil),        // 13: auth_authorization.MqttAuthorization
	(*TopicIsAvailable)(nil),         // 14: auth_authorization.TopicIsAvailable
}
var file_authorization_authorization_proto_depIdxs = []int32{
	4,  // 0: auth_authorization.AuthorizeRequest.token:type_name -> auth_authorization.Token
	6,  // 1: auth_authorization.AuthorizeResponse.grants:type_name -> auth_authorization.Grant
	7,  // 2: auth_authorization.Grant.time:type_name -> auth_authorization.GrantTime
	8,  // 3: auth_authorization.SanitizeRequest.request:type_name -> auth_authorization.Request
	4,  // 4: auth_authorization.SanitizeDecryptedRequest.token:type_name -> auth_authorization.Token
	8,  // 5: auth_authorization.SanitizeDecryptedRequest.request:type_name -> auth_authorization.Request
	6,  // 6: auth_authorization.SanitizeResponse.grants:type_name -> auth_authorization.Grant
	8,  // 7: auth_authorization.SanitizeResponse.request:type_name -> auth_authorization.Request
	6,  // 8: auth_authorization.GrantsList.items:type_name -> auth_authorization.Grant
	2,  // 9: auth_authorization.AuthorizationService.Can:input_type -> auth_authorization.AuthorizeRequest
	3,  // 10: auth_authorization.AuthorizationService.Grants:input_type -> auth_authorization.AccessRequest
	9,  // 11: auth_authorization.AuthorizationService.Sanitize:input_type -> auth_authorization.SanitizeRequest
	10, // 12: auth_authorization.AuthorizationService.SanitizeDecrypted:input_type -> auth_authorization.SanitizeDecryptedRequest
	13, // 13: auth_authorization.AuthorizationService.MqttTopicAuthorization:input_type -> auth_authorization.MqttAuthorization
	0,  // 14: auth_authorization.AuthorizationService.MqttMessageFieldFilter:input_type -> auth_authorization.MqttFieldFilter
	5,  // 15: auth_authorization.AuthorizationService.Can:output_type -> auth_authorization.AuthorizeResponse
	12, // 16: auth_authorization.AuthorizationService.Grants:output_type -> auth_authorization.GrantsList
	11, // 17: auth_authorization.AuthorizationService.Sanitize:output_type -> auth_authorization.SanitizeResponse
	11, // 18: auth_authorization.AuthorizationService.SanitizeDecrypted:output_type -> auth_authorization.SanitizeResponse
	14, // 19: auth_authorization.AuthorizationService.MqttTopicAuthorization:output_type -> auth_authorization.TopicIsAvailable
	1,  // 20: auth_authorization.AuthorizationService.MqttMessageFieldFilter:output_type -> auth_authorization.ResponseMqttFieldFilter
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_authorization_authorization_proto_init() }
func file_authorization_authorization_proto_init() {
	if File_authorization_authorization_proto != nil {
		return
	}
	file_authorization_authorization_proto_msgTypes[2].OneofWrappers = []any{}
	file_authorization_authorization_proto_msgTypes[3].OneofWrappers = []any{}
	file_authorization_authorization_proto_msgTypes[4].OneofWrappers = []any{}
	file_authorization_authorization_proto_msgTypes[8].OneofWrappers = []any{}
	file_authorization_authorization_proto_msgTypes[9].OneofWrappers = []any{}
	file_authorization_authorization_proto_msgTypes[10].OneofWrappers = []any{}
	file_authorization_authorization_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authorization_authorization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authorization_authorization_proto_goTypes,
		DependencyIndexes: file_authorization_authorization_proto_depIdxs,
		MessageInfos:      file_authorization_authorization_proto_msgTypes,
	}.Build()
	File_authorization_authorization_proto = out.File
	file_authorization_authorization_proto_rawDesc = nil
	file_authorization_authorization_proto_goTypes = nil
	file_authorization_authorization_proto_depIdxs = nil
}
